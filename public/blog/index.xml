<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on davegaeddert</title>
    <link>https://davegaeddert.com/blog/index.xml</link>
    <description>Recent content in Blogs on davegaeddert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://davegaeddert.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pull request approval, for real</title>
      <link>https://davegaeddert.com/pull-request-approval-for-real/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/pull-request-approval-for-real/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;http://flinthillsdesign.com/&#34;&gt;Flint Hills Design&lt;/a&gt;, we use GitHub. We haven&amp;rsquo;t always, and we still host a lot of repos elsewhere on our own servers, but there are just too many benefits to using a service like GitHub. Especially when it comes to collaboration.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s no secret that one of the best features of GitHub is the fork and pull request workflow. With public projects, forking a repository and asking for your changes to be merged back in to the main codebase makes a lot of sense. People can easily clone the code, fiddle around with it, and when they&amp;rsquo;re ready, present it to the project maintainers to get their approval and hopefully get it merged into the public project.&lt;/p&gt;

&lt;p&gt;This formal, request and approval workflow is the same way that we handle internal projects. We have a spoken rule that an &amp;ldquo;admin&amp;rdquo; needs to review things before they get put into production. Unfortunately there&amp;rsquo;s no way to actually implement this, other than to say &amp;ldquo;don&amp;rsquo;t click the merge button, even though you can&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Sure, the fork-flow accomplishes exactly this, but for us, the fork / multiple repo structure is unnecessarily complicated. We like to keep our tooling as simple as it needs to be. One way we like to keep it simple is to keep a project to one repository. Ideally, all of our developers could work on branches on the main repo, but nothing could be merged into master without approval. &amp;ldquo;Limited write-access&amp;rdquo; in a sense.&lt;/p&gt;

&lt;p&gt;With the new &lt;a href=&#34;https://github.com/blog/2051-protected-branches-and-required-status-checks&#34;&gt;GitHub protected branches&lt;/a&gt;, we can actually have the best of both worlds. Protected branches, in short, let you choose specific tests that all code needs to pass, before it can be merged in to the master branch. The most common form that these status checks take is in continuous integration services, like Travis CI or Circle CI. But the cool thing about these status checks is that &lt;em&gt;anything can be a status check!&lt;/em&gt; Code goes in, something happens, and a pass or fail comes out. It could be signing a CLA, checking commit message syntax, running traditional tests&amp;hellip;anything. In addition, the &amp;ldquo;merge&amp;rdquo; button on pull requests can actually be disabled until these status checks pass!&lt;/p&gt;

&lt;p&gt;With that in mind, we created &lt;a href=&#34;https://pullapprove.com/&#34;&gt;PullApprove&lt;/a&gt;. PullApprove is a dead simple service, utilizing webhooks and status checks to say whether or not a pull request has been approved (clever name, I know). Just decide who needs to approve things. The rules for who needs to be approve what can be as simple, or as complicated as you like. Do all of the developers need to review a PR? Maybe 2 of 3 admins need to give the ok? Or just one person needs to approve everything?&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to say, and maybe there will need to be some additional posts on this topic. The gist:&lt;/p&gt;

&lt;h2 id=&#34;you-can-have-a-truly-formalized-approval-process-for-deciding-what-can-be-merged-and-what-can-t&#34;&gt;You can have a truly formalized approval process for deciding what can be merged and what can&amp;rsquo;t.&lt;/h2&gt;

&lt;h4 id=&#34;https-pullapprove-com&#34;&gt;&lt;a href=&#34;https://pullapprove.com&#34;&gt;https://pullapprove.com&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://davegaeddert.com/img/blog/approve-by-comment.gif&#34; alt=&#34;PullApprove with a comment&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This is what side projects look like.</title>
      <link>https://davegaeddert.com/this-is-what-side-projects-look-like./</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/this-is-what-side-projects-look-like./</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2015-10-03-at-12-21-04-AM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Sheets formula to convert US State abbreviations</title>
      <link>https://davegaeddert.com/google-sheets-formula-to-convert-us-state-abbreviations/</link>
      <pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/google-sheets-formula-to-convert-us-state-abbreviations/</guid>
      <description>&lt;p&gt;I had a simple problem yesterday. I was trying to import a spreadsheet of contacts into Salesforce, but the states in the addresses were all written as the abbreviations, when Salesforce wanted the full names.&lt;/p&gt;

&lt;p&gt;Seemed like a simple enough problem, but I couldn&amp;rsquo;t find a way to convert these easily. Being a stupid programmer, I thought I&amp;rsquo;d just make one. I only pushed it far enough to do the job. I didn&amp;rsquo;t get it listed in the Google add-ons or anything, but went ahead and made a GitHub repo for it here: &lt;a href=&#34;https://github.com/davegaeddert/google-sheets-us-states&#34;&gt;https://github.com/davegaeddert/google-sheets-us-states&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/davegaeddert/google-sheets-us-states/raw/master/demo.gif&#34; alt=&#34;demo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I broke the GitHub logo guidelines, and they thanked me.</title>
      <link>https://davegaeddert.com/i-broke-the-github-logo-guidelines-and-they-thanked-me./</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/i-broke-the-github-logo-guidelines-and-they-thanked-me./</guid>
      <description>

&lt;p&gt;I have a &lt;a href=&#34;https://sibbell.com/&#34;&gt;simple web app that uses the GitHub APIs&lt;/a&gt;. Naturally, the GitHub name and Octocat logo show up a lot around the site.&lt;/p&gt;

&lt;p&gt;When I asked a coworker to help me with the original Sibbell homepage design, he came up with something that we all thought looked pretty cool. Unfortunately, as you can see, the GitHub Octocat dominated the design. At the time we acknowledged this, even read the &lt;a href=&#34;https://github.com/logos&#34;&gt;GitHub logo guidelines&lt;/a&gt;, and ultimately decided that since we didn&amp;rsquo;t even have a logo for Sibbell yet, we&amp;rsquo;d just roll with it and assume the site will be too insignificant for anyone to care.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://davegaeddert.com/img/blog/sibbell.jpg&#34; alt=&#34;Sibbell homepage with GitHub Octocat&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;turns-out-they-did-see-it-and-they-do-care&#34;&gt;Turns out, they did see it. And they do care.&lt;/h2&gt;

&lt;p&gt;A couple weeks ago I got an email from them entitled &lt;strong&gt;Trademark Concerns About the &amp;ldquo;Sibbell&amp;rdquo; Website&lt;/strong&gt;. When I first saw it, I got a little worried that I had pissed off one of my favorite companies, nevermind the fact that Sibbell &lt;em&gt;completely&lt;/em&gt; relies on GitHub at this point. But as I started reading the email, what I found was a remarkably polite, personal &amp;ldquo;[&amp;hellip;] friendly request to ask you to remove the large Octocat logo in the background of your site to avoid any potential confusion.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I immediately removed the Octocat and replied. He thanked me for my quick response and understanding, asked that I add a couple more lines to the footer of the site, and offered to send me some swag or GitHub coupons as a token of their appreciation! Who would turn down a free GitHub t-shirt?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2015-07-05-at-5-22-00-PM.png&#34; alt=&#34;Sibbell footer with GitHub affiliation comments&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;customer-service&#34;&gt;Customer service&lt;/h2&gt;

&lt;p&gt;All of this is not to say that &amp;ldquo;if you break the rules, people will give you free stuff&amp;rdquo;. Rather, to point out the value in good customer service. This experience has only solidified my appreciation for what GitHub does and assured that I will continue to be an advocate for github.com. After all, integrations like Sibbell promote the use of GitHub and can serve as a form of marketing for them. Plus, now I&amp;rsquo;ll be sporting a nice GitHub t-shirt every once in a while.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sibbell: A SaaS Pricing Experiment</title>
      <link>https://davegaeddert.com/sibbell-a-saas-pricing-experiment/</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/sibbell-a-saas-pricing-experiment/</guid>
      <description>

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;I suppose you could consider &lt;a href=&#34;https://sibbell.com&#34;&gt;Sibbell&lt;/a&gt; to be a SaaS (Software as a Service). Sibbell started out as a solution to a problem: how do I stay up-to-date with all of the open source projects that I use? 90% of the time when I find a bug (or better yet, a client finds a bug) in an open source library, it&amp;rsquo;s already been fixed and I just don&amp;rsquo;t know it.&lt;/p&gt;

&lt;p&gt;GitHub continues to prove to be the &amp;ldquo;hub&amp;rdquo; of open source. Almost every open source project worth mentioning now lives on GitHub.&lt;/p&gt;

&lt;p&gt;Sibbell does one thing: &lt;a href=&#34;http://davegaeddert.com/2014/10/11/sibbell-emails-for-new-releases-on-github/&#34;&gt;notify you whenever the GitHub projects you use get updated&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-i-ve-learned-so-far&#34;&gt;What I&amp;rsquo;ve learned so far&lt;/h2&gt;

&lt;p&gt;Running a site like Sibbell costs money (not to mention time). Even though the hosting and other associated costs are still fairly low, it starts to add up. Especially if you want to deliver the experience that users are used to these days.&lt;/p&gt;

&lt;p&gt;I love free stuff as much as the next guy, but as I&amp;rsquo;ve gotten older and more &amp;ldquo;experienced&amp;rdquo;, I&amp;rsquo;ve learned to appreciate the value of a good product. I&amp;rsquo;ve also learned that sometimes you have to pay for a good product. And that&amp;rsquo;s ok. In fact, I almost prefer it.&lt;/p&gt;

&lt;p&gt;When I pay for something, I think of it as an acknowledgement of these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it costs less than the time and energy expense of using an inferior product or hand-built solution&lt;/li&gt;
&lt;li&gt;if they&amp;rsquo;re charging for it, they&amp;rsquo;re committed to its future and making improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To that end, I&amp;rsquo;m introducing paid services in Sibbell.&lt;/p&gt;

&lt;h2 id=&#34;a-la-carte-monthly-pricing&#34;&gt;A la carte monthly pricing&lt;/h2&gt;

&lt;p&gt;Like I said, I like free stuff too. I want the core functionality of Sibbell to remain free and still do its job. As far as pricing models, I&amp;rsquo;ve toyed around with a few things. An obvious option, which you see in a lot of SaaS&amp;rsquo;s, is to have a few tiers of features with different monthly costs. A variation on this that came to mind, which I can&amp;rsquo;t think of too many examples of, is to break out the set of features (maybe 5 or 6) into small subscribtions that can be individually enabled - a la carte style. By small subscriptions, I really mean small - like $1 or $2 per month. My hope is that at that price, pulling the trigger should almost be a no-brainer for a user. For me, even if a fairly low percentage of users convert with an average of $2 a piece ($2 == 1 feature), Sibbell could pay for itself.&lt;/p&gt;

&lt;p&gt;Then again, maybe there&amp;rsquo;s a reason I can&amp;rsquo;t think of many examples of this kind of pricing model&amp;hellip;we&amp;rsquo;ll see.&lt;/p&gt;

&lt;p&gt;Some potential feature examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;batch notifications - instead of receiving emails as-it-happens, get a daily or weekly summary (weekly is already in place)&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://chrome.google.com/webstore/detail/sibbell/focknnclhinffehmdpokckjahcfaldac&#34;&gt;Sibbell Chrome extension&lt;/a&gt; (already in place)&lt;/li&gt;
&lt;li&gt;individually choose repos instead of just enabling all &amp;ldquo;stars&amp;rdquo; or all repos you&amp;rsquo;re &amp;ldquo;watching&amp;rdquo; (already in place)&lt;/li&gt;
&lt;li&gt;webhook notifications - &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; integration?&lt;/li&gt;
&lt;li&gt;choosing if you want major or minor release notifications - per repo?&lt;/li&gt;
&lt;li&gt;anything regarding pre-releases - not used too often though&amp;hellip;&lt;/li&gt;
&lt;li&gt;a Sibbell button, via &lt;a href=&#34;https://chrome.google.com/webstore/detail/sibbell/focknnclhinffehmdpokckjahcfaldac&#34;&gt;Chrome extension&lt;/a&gt;, that shows up on GitHub repo pages next to the watch/star/fork buttons and allows you to quickly enable/disable Sibbell notifications&lt;/li&gt;
&lt;li&gt;organize releases by your projects - ex. Sibbell uses &lt;a href=&#34;https://github.com/django/django&#34;&gt;django/django&lt;/a&gt;, &lt;a href=&#34;https://github.com/kennethreitz/requests&#34;&gt;kennethreitz/requests&lt;/a&gt;, and I want to know when to update my requirements

&lt;ul&gt;
&lt;li&gt;various tools that do this already (&lt;a href=&#34;https://requires.io/&#34;&gt;https://requires.io/&lt;/a&gt;, &lt;a href=&#34;https://david-dm.org/&#34;&gt;https://david-dm.org/&lt;/a&gt;, but are there any that cover multiple languages? &lt;a href=&#34;https://gemnasium.com/?&#34;&gt;https://gemnasium.com/?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;notifications on GitHub status? outages, etc.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Customizing Bootstrap with Less</title>
      <link>https://davegaeddert.com/customizing-bootstrap-with-less/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/customizing-bootstrap-with-less/</guid>
      <description>

&lt;p&gt;We at &lt;a href=&#34;http://flinthillsdesign.com&#34;&gt;Flint Hills Design&lt;/a&gt; build a lot of websites. We also use &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; to build a lot of those sites. &amp;ldquo;Why&amp;rdquo; is a whole &amp;lsquo;nother topic on its own, but needless to say, it saves us a ton of time and energy, and allows our small team to accomplish more than we ever could if we started every site from scratch.&lt;/p&gt;

&lt;p&gt;The downside of using the same framework for many different projects? They could easily all end up looking exactly the same! And exactly the same as thousands of other sites that are also built on Bootstrap!&lt;/p&gt;

&lt;h1 id=&#34;so-what-do-you-do-customize-it&#34;&gt;So what do you do? Customize it.&lt;/h1&gt;

&lt;p&gt;There are many ways that you can customize your Bootstrap setup, most of them deal with modifying the &lt;a href=&#34;http://getbootstrap.com/css/#less&#34;&gt;Less&lt;/a&gt; or &lt;a href=&#34;http://getbootstrap.com/css/#sass&#34;&gt;Sass&lt;/a&gt; variables, which makes sense. But there doesn&amp;rsquo;t really seem to be a suggested way to &lt;em&gt;actually&lt;/em&gt; do that.&lt;/p&gt;

&lt;p&gt;We use Less, and here&amp;rsquo;s how we do it.&lt;/p&gt;

&lt;h3 id=&#34;install-bootstrap&#34;&gt;Install Bootstrap&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt; to do this. Something like &lt;code&gt;bower install bootstrap&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;create-bootstrap-custom&#34;&gt;Create bootstrap-custom&lt;/h3&gt;

&lt;p&gt;The file structure here might be a little bit overkill, but should also be able to handle anything we decide to do in the future. The important thing is that we want a &lt;code&gt;variables-custom.less&lt;/code&gt; file, which we put in &lt;code&gt;bootstrap-custom/less/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2015-04-21-at-9-17-37-PM.png&#34; alt=&#34;file structure&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;redefine-the-variables-in-variables-custom-less&#34;&gt;Redefine the variables in variables-custom.less&lt;/h3&gt;

&lt;p&gt;The idea here is to &lt;strong&gt;only override the variables you need&lt;/strong&gt;. This will make it incredibly easy to track down your modifications, and make updating Bootstrap much easier (all you&amp;rsquo;ll need to do is check that the names of variables you are using didn&amp;rsquo;t change).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just copy and paste the lines you want to modify, and change them.&lt;/strong&gt;
&lt;script src=&#34;https://gist.github.com/davegaeddert/dd3f3d1b895bd15e000e.js?file=variables-custom.less&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;add-your-variables-to-bootstrap-variables-less&#34;&gt;Add your variables to Bootstrap variables.less&lt;/h3&gt;

&lt;p&gt;This is the only part of the Bootstrap source that you will need to modify. We just tell Bootstrap to override the default &lt;code&gt;variables.less&lt;/code&gt; with any customizations we made in &lt;code&gt;variables-custom.less&lt;/code&gt;. Now when it compiles, you&amp;rsquo;ll have all your modifications, safe and as detached as possible from the Bootstrap source code!
&lt;script src=&#34;https://gist.github.com/davegaeddert/dd3f3d1b895bd15e000e.js?file=variables.less&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&#34;bonus-points&#34;&gt;Bonus points&lt;/h4&gt;

&lt;p&gt;You can also use these variables (and Bootstrap mixins and whatever else you&amp;rsquo;d like) in your own stylesheets. Just &lt;code&gt;@import&lt;/code&gt; them at the top.
&lt;script src=&#34;https://gist.github.com/davegaeddert/dd3f3d1b895bd15e000e.js?file=style.less&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple tabs in Chrome with different sessions</title>
      <link>https://davegaeddert.com/multiple-tabs-in-chrome-with-different-sessions/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/multiple-tabs-in-chrome-with-different-sessions/</guid>
      <description>&lt;p&gt;I work on a lot of web apps. Sometimes they get pretty complicated and I end up viewing the site as one user in Chrome, another in an incognito window, and another in Safari. I&amp;rsquo;ve been doing this for a long time. It wasn&amp;rsquo;t until recently that I realized this, and realized how dumb it was.&lt;/p&gt;

&lt;p&gt;After a quick search and a little looking around, I decided to try this Chrome extension. Turns out, it&amp;rsquo;s pretty great (don&amp;rsquo;t be deterred by the look of it). All you do is click the toolbar button to open a new tab that has its own session - each tab can then be like its own incognito window and you can sign in to whatever accounts you need without affecting the rest of your browser.&lt;/p&gt;

&lt;p&gt;MultiLogin Chrome extension
&lt;a href=&#34;https://chrome.google.com/webstore/detail/multilogin/nccllfnllopfpcbjdgjdlfmomnfgnnbk?hl=en&#34;&gt;https://chrome.google.com/webstore/detail/multilogin/nccllfnllopfpcbjdgjdlfmomnfgnnbk?hl=en&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celery in local Django development</title>
      <link>https://davegaeddert.com/celery-in-local-django-development/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/celery-in-local-django-development/</guid>
      <description>&lt;p&gt;Recently I set up &lt;a href=&#34;http://www.celeryproject.org/&#34;&gt;Celery&lt;/a&gt; to perform some background tasks for &lt;a href=&#34;http://sibbell.com&#34;&gt;Sibbell&lt;/a&gt;, a Django project. The tasks were pretty simple, and I wasn&amp;rsquo;t interested in installing &lt;a href=&#34;http://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; (which I was using on the production server) on my local machine at the time for use in the development environment.&lt;/p&gt;

&lt;p&gt;The solution? Use the &lt;code&gt;CELERY_ALWAYS_EAGER&lt;/code&gt; &lt;a href=&#34;http://celery.readthedocs.org/en/latest/configuration.html#celery-always-eager&#34;&gt;setting&lt;/a&gt;. It runs the tasks asynchronously, which in this case was just fine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xcode exception breakpoints</title>
      <link>https://davegaeddert.com/xcode-exception-breakpoints/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/xcode-exception-breakpoints/</guid>
      <description>&lt;p&gt;Having trouble tracking down where your exceptions are coming from in iOS development? If you&amp;rsquo;re not using exception breakpoints, you should be.&lt;/p&gt;

&lt;p&gt;Just go to breakpoints:
&lt;img src=&#34;https://davegaeddert.com/img/blog/2fb922f8d8119a7830d18e452069ed11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add an exception breakpoint:
&lt;img src=&#34;https://davegaeddert.com/img/blog/ae2894f2f3d826dd75b1ab45c2349ec0.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://davegaeddert.com/img/blog/a9c3e2970d2d6427d4c330331f87131a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. Now when an exception is thrown, Xcode will take you straight to the line where it originated.
&lt;img src=&#34;https://davegaeddert.com/img/blog/7878ebf6d2898abc5ddba44edcabe8da.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sibbell - emails for new releases on GitHub</title>
      <link>https://davegaeddert.com/sibbell---emails-for-new-releases-on-github/</link>
      <pubDate>Sat, 11 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/sibbell---emails-for-new-releases-on-github/</guid>
      <description>

&lt;p&gt;As a developer, I leverage tons of open source projects to help me get good work done quickly. Judging by the popularity of GitHub&amp;hellip;I don&amp;rsquo;t think I&amp;rsquo;m alone in that. One problem I&amp;rsquo;ve realized is that there is no good way for me to know when those projects I like and use get updated. The idea is pretty simple, when Twitter Bootstrap gets updated, that&amp;rsquo;s something I want to know about right away.&lt;/p&gt;

&lt;p&gt;You would think that this is something that GitHub would be good for, and you&amp;rsquo;d be half right.&lt;/p&gt;

&lt;p&gt;So when I say &amp;lsquo;updated&amp;rsquo; what we&amp;rsquo;re really talking about are new releases. &amp;lsquo;Releases&amp;rsquo; are an entity on GitHub, tied directly to Git tags. Almost any semi-serious projects uses &amp;lsquo;releases&amp;rsquo; on GitHub.
&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-10-11-at-11-28-06-AM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Getting notifications for new releases seems like a pretty simple thing! GitHub does this, but only if you &amp;lsquo;watch&amp;rsquo; the repo. And the problem with watching? You get notified for &lt;a href=&#34;https://help.github.com/articles/about-notifications/&#34;&gt;every issue, pull request, and comment along with the published releases&lt;/a&gt;. There&amp;rsquo;s no middle ground, and while it&amp;rsquo;d be a pretty simple thing for them to add, I decided there&amp;rsquo;s no reason for me to wait for something that might never even happen.
&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-10-11-at-11-25-51-AM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;so-here-is-sibbell-com-http-sibbell-com&#34;&gt;So here is &lt;a href=&#34;http://sibbell.com/&#34;&gt;Sibbell.com&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;Right now Sibbell works in one easy way, have it notify you for any new releases for repos that you&amp;rsquo;ve starred on GitHub. That&amp;rsquo;s it. I wanted it to be as simple as possible from the start, but if people find it appealing, there&amp;rsquo;s all kinds of things you could do with it.
&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-10-11-at-11-36-26-AM.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-10-11-at-11-38-10-AM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS 8 Notification Actions</title>
      <link>https://davegaeddert.com/ios-8-notification-actions/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/ios-8-notification-actions/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#tutorial&#34;&gt;Skip to the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am finally getting around to adding some of the new iOS 8 features to &lt;a href=&#34;https://itunes.apple.com/us/app/beluga-shared-tasks./id836830314?mt=8&#34;&gt;Beluga&lt;/a&gt;. For whatever reason, I haven&amp;rsquo;t been able to find any documentation on the new ability to add actions to notifications:
&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-09-16-at-5-28-05-PM.png&#34; alt=&#34;iOS 8 Notification&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe I didn&amp;rsquo;t look hard enough, who knows. Anyway I decided to make quick demo of how to do this based on the &lt;a href=&#34;https://developer.apple.com/videos/wwdc/2014/&#34;&gt;WWDC 2014 session video &amp;ldquo;What&amp;rsquo;s New in iOS Notifications&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;span-id-tutorial-span-tutorial&#34;&gt;&lt;span id=&#34;tutorial&#34;&gt;&lt;/span&gt;Tutorial&lt;/h1&gt;

&lt;p&gt;All of the following can be found in a ready-to-go Xcode project on &lt;a href=&#34;https://github.com/davegaeddert/tut-ios8-notifications&#34;&gt;GitHub&lt;/a&gt;, I know I always just jump there&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;create-a-notification-action&#34;&gt;Create a notification action&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;UIMutableUserNotificationAction *acceptAction = [[UIMutableUserNotificationAction alloc] init];
acceptAction.identifier = @&amp;quot;ACCEPT_IDENTIFIER&amp;quot;;
acceptAction.title = @&amp;quot;Accept&amp;quot;;

// Given seconds, not minutes, to run in the background
acceptAction.activationMode = UIUserNotificationActivationModeBackground;

// If YES the action is red
acceptAction.destructive = NO;

// If YES requires passcode, but does not unlock the device
acceptAction.authenticationRequired = NO;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-notification-action-category&#34;&gt;Create a notification action category&lt;/h2&gt;

&lt;p&gt;This allows you to group notifications, so for a &amp;lsquo;Mail&amp;rsquo; category your might have &amp;lsquo;Reply&amp;rsquo;, &amp;lsquo;Delete&amp;rsquo;, and &amp;lsquo;Archive&amp;rsquo;. Right now we&amp;rsquo;re creating an &amp;lsquo;Invite&amp;rsquo; category, with our one action of &amp;lsquo;Accept&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;UIMutableUserNotificationCategory *inviteCategory = [[UIMutableUserNotificationCategory alloc] init];
inviteCategory.identifier = @&amp;quot;INVITE_CATEGORY&amp;quot;;

// You can define up to 4 actions in the &#39;default&#39; context
// On the lock screen, only the first two will be shown
// If you want to specify which two actions get used on the lockscreen, use UIUserNotificationActionContextMinimal
[inviteCategory setActions:@[acceptAction] forContext:UIUserNotificationActionContextDefault];

// These would get set on the lock screen specifically
// [inviteCategory setActions:@[declineAction, acceptAction] forContext:UIUserNotificationActionContextMinimal];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;now-register-for-those-notifications&#34;&gt;Now register for those notifications&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;UIUserNotificationType types = (UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound);

NSSet *categories = [NSSet setWithObjects:inviteCategory, nil];
UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:types categories:categories];

[[UIApplication sharedApplication] registerUserNotificationSettings:settings];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When registering notification settings, this callback will be called:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings {

    // Get the notifications types that have been allowed, do whatever with them
    UIUserNotificationType allowedTypes = [notificationSettings types];

    NSLog(@&amp;quot;Registered for notification types: %u&amp;quot;, allowedTypes);

    // You can get this setting anywhere in your app by using this:
    // UIUserNotificationSettings *currentSettings = [[UIApplication sharedApplication] currentUserNotificationSettings];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;send-yourself-a-local-notification&#34;&gt;Send yourself a local notification&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-09-16-at-6-02-50-PM.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://davegaeddert.com/img/blog/Screen-Shot-2014-09-16-at-6-04-01-PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;UILocalNotification *notification = [[UILocalNotification alloc] init];
notification.alertBody = @&amp;quot;Hey!&amp;quot;;
notification.category = @&amp;quot;INVITE_CATEGORY&amp;quot;;

// The notification will arrive in 5 seconds, leave the app or lock your device to see
// it since we aren&#39;t doing anything to handle notifications that arrive while the app is open
notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:5];

[[UIApplication sharedApplication] scheduleLocalNotification:notification];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handle-the-action&#34;&gt;Handle the action&lt;/h2&gt;

&lt;p&gt;Sweet! Now you should have received the notification (note: you need to be anywhere but the app to see the notification with its actions: home screen, lock screen, another app, etc.), if you choose the &amp;lsquo;Accept&amp;rsquo; action we created then this callback will be called so you can deal with it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forLocalNotification:(UILocalNotification *)notification completionHandler:(void (^)())completionHandler {

    if ([identifier isEqualToString:@&amp;quot;ACCEPT_IDENTIFIER&amp;quot;]) {
        // handle it
        NSLog(@&amp;quot;Invite accepted! Handle that somehow...&amp;quot;);
    }

    // Call this when you&#39;re finished
    completionHandler();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/davegaeddert/tut-ios8-notifications&#34;&gt;View the full code on Github (look in AppDelegate.m)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reusing effort otherwise &#34;waster&#34;</title>
      <link>https://davegaeddert.com/reusing-effort-otherwise-waster/</link>
      <pubDate>Sun, 14 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/reusing-effort-otherwise-waster/</guid>
      <description>

&lt;p&gt;One concept I&amp;rsquo;ve always loved is the idea of utilizing effort that is otherwise lost. By that I mean capturing time and energy that we spend every day, and getting as much value out of it as possible.&lt;/p&gt;

&lt;p&gt;Probably best illustrated by example:&lt;/p&gt;

&lt;h3 id=&#34;recaptcha&#34;&gt;Recaptcha&lt;/h3&gt;

&lt;p&gt;Every time you fill out a recaptcha, &lt;a href=&#34;http://www.google.com/recaptcha/intro/#creation-of-value&#34;&gt;you&amp;rsquo;re doing more than proving you&amp;rsquo;re a human&lt;/a&gt;. You are the human cog in &amp;ldquo;digitizing text, annotating images, building machine learning datasets&amp;rdquo;. I think this was the first time this concept really hit me.&lt;/p&gt;

&lt;h3 id=&#34;duolingo&#34;&gt;Duolingo&lt;/h3&gt;

&lt;p&gt;Duolingo does something similar. By using Duolingo, people are crowdsourcing translations for websites. For Duolingo, it makes for a &lt;a href=&#34;http://en.wikipedia.org/wiki/Duolingo#Business_model&#34;&gt;pretty interesting business model&lt;/a&gt;. This is part of the reason why they&amp;rsquo;re able to provide such a wonderful free service. &lt;a href=&#34;http://blog.duolingo.com/post/64024962586/duolingo-now-translating-buzzfeed-and-cnn&#34;&gt;CNN and Buzzfeed&lt;/a&gt; are being translated by you learning Spanish.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitignore.it</title>
      <link>https://davegaeddert.com/gitignore.it/</link>
      <pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/gitignore.it/</guid>
      <description>

&lt;p&gt;Last week I had a little free time and started a small side project. I&amp;rsquo;ve had it on my list for a while - I imagine most developers have a list somewhere of ideas for projects or apps, some complex and some simple. This one is simple.&lt;/p&gt;

&lt;p&gt;Back when I was just getting started with Git, It felt like there were a lot of things to learn all at once. The nature of .gitignore and the philosophy behind it was one of those things. I always like to learn the reasoning behind things before using them, but sometimes you just need a kickstart - like which dot files shouldn&amp;rsquo;t be tracked and how to keep them out of your repo! .DS_Store is a prime example.&lt;/p&gt;

&lt;p&gt;I was surprised to find that there wasn&amp;rsquo;t anything that could just step me through how, why, and what should be in .gitignore. Eventually I came across &lt;a href=&#34;https://github.com/github/gitignore/&#34;&gt;github/gitignore&lt;/a&gt; and knew that was the place to start. Although it&amp;rsquo;s several years later than when I had the original idea, I couldn&amp;rsquo;t bare to throw it away. I always had doubts about its true usefulness, but I decided to make it anyway, even despite finding some similar sites out there (which don&amp;rsquo;t do a great job if you ask me). This is just a start, I plan to add more information to the site about how to properly use .gitignore and how to set up a global .gitignore.&lt;/p&gt;

&lt;h1 id=&#34;here-it-is-http-gitignore-it&#34;&gt;Here it is: &lt;a href=&#34;http://gitignore.it&#34;&gt;http://gitignore.it&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;You can also find the code on &lt;a href=&#34;https://github.com/davegaeddert/gitignore.it/&#34;&gt;GitHub&lt;/a&gt;&lt;/em&gt;.
&lt;img src=&#34;https://davegaeddert.com/img/blog/site-preview.png&#34; alt=&#34;gitignore.it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;More to come about this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The plunge</title>
      <link>https://davegaeddert.com/the-plunge/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davegaeddert.com/the-plunge/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve had it on my list of things to do for a long time, even tried once or twice. Being a &lt;a href=&#34;http://flinthillsdesign.com&#34;&gt;software developer&lt;/a&gt;, building a blog is one of those things that always sounds like a nice side project, but then you get started, hung up on design and functionality, and a month later it falls by the wayside. I know, I&amp;rsquo;ve done it before.&lt;/p&gt;

&lt;p&gt;In the meantime I&amp;rsquo;ve been keeping track of things that I thought might make for worthwhile posts, as much for supplementing my own memory as anything else, but also for anyone struggling with particular problems that seemingly don&amp;rsquo;t have good documented solutions.&lt;/p&gt;

&lt;p&gt;In conclusion, I decided to put up a blog and just pick a theme. No pressure on building anything awesome right off the bat, just get something clean and simple and get started. Although I build a ton of websites using WordPress at work, I went with &lt;a href=&#34;https://ghost.org&#34;&gt;Ghost&lt;/a&gt; because of its straightforward approach and because I&amp;rsquo;ve wanted an excuse to try it for a while, as well as spend more time using Node.js.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>